openapi: 3.0.1
info:
  title: Personal Budget
  description: >
    Simple Node/Express API to manage a portfolio budget using a budget envelope strategy. 
    Users can create, read, update, and delete envelopes as well as create transactions 
    for each individual envelope. All data is persisted in a database using PostgreSQL.
  version: 1.0.0
tags:
  - name: user
    description: Everything about users information
  - name: envelope
    description: Access to envelopes
  - name: transaction
    description: Transactions history
paths:
  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: Return all users in array
      operationId: getUsers
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-swagger-router-controller: User
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the database
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user_body'
        required: true
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid Body supplied
      x-swagger-router-controller: User
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Return a single user
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
        - user
      summary: Update an existing user
      description: Return an updated user
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object that needs to be changed to in the database
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user_body'
      responses:
        '201':
          description: Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid Body supplied
        '404':
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Deleted Successfully
        '404':
          description: User not found
      x-swagger-router-controller: User
  /envelope:
    get:
      tags:
        - envelope
      summary: Get all envelopes
      operationId: getEnvelopes
      parameters:
        - name: userId
          in: query
          description: ID of user to return
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Envelope'
                x-content-type: application/json
        '404':
          description: User not found
      x-swagger-router-controller: Envelope
    post:
      tags:
        - envelope
      summary: Create a new envelope
      operationId: createEnvelope
      requestBody:
        description: Envelope object that need to be created in database
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/envelope_body'
        required: true
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: Invalid Body supplied
      x-swagger-router-controller: Envelope
    delete:
      tags:
        - envelope
      summary: Delete all envelopes
      operationId: deleteEnvelopes
      responses:
        '204':
          description: Successfull Operation
        '404':
          description: User not found
      x-swagger-router-controller: Envelope
  /envelope/{envelopeId}:
    get:
      tags:
        - envelope
      summary: Get an envelope
      description: Return a single envelope
      operationId: getEnvelopeById
      parameters:
        - name: envelopeId
          in: path
          description: ID of envelope to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '404':
          description: Envelope not found
      x-swagger-router-controller: Envelope
    put:
      tags:
        - envelope
      summary: Update an envelope
      operationId: updateEnvelopeById
      parameters:
        - name: envelopeId
          in: path
          description: ID of envelope to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Envelope object that need to be created in database
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/envelope_body'
      responses:
        '201':
          description: Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Envelope'
        '400':
          description: Invalid Body supplied
        '404':
          description: Envelope not found
      x-swagger-router-controller: Envelope
    delete:
      tags:
        - envelope
      summary: Delete an envelopes
      operationId: deleteEnvelopeById
      parameters:
        - name: envelopeId
          in: path
          description: ID of envelope to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfull Operation
        '404':
          description: Envelope not found
      x-swagger-router-controller: Envelope
  /transaction:
    get:
      tags:
        - transaction
      summary: Get all transactions
      description: Return array of transactions
      operationId: getTransactions
      parameters:
        - name: envelopeId
          in: query
          description: ID of envelope to return
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
                x-content-type: application/json
        '404':
          description: Envelope not found
      x-swagger-router-controller: Transaction
    post:
      tags:
        - transaction
      summary: Create a transaction
      operationId: createTransaction
      requestBody:
        description: Envelope object that need to be created in database
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/transaction_body'
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid body supplied
      x-swagger-router-controller: Transaction
  /transaction/{transactionId}:
    get:
      tags:
        - transaction
      summary: Get a transaction
      description: Return a single transaction
      operationId: getTransactionById
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
      x-swagger-router-controller: Transaction
    put:
      tags:
        - transaction
      summary: Update a transaction
      operationId: updateTransactionById
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
      x-swagger-router-controller: Transaction
    delete:
      tags:
        - transaction
      summary: Delete a transaction
      operationId: deleteTransactionById
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Deleted Successfully
        '404':
          description: Transaction not found
      x-swagger-router-controller: Transaction
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          type: string
      example:
        firstName: firstName
        lastName: lastName
        gender: gender
        id: 0
        email: email
    Envelope:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        name:
          type: string
        amount:
          type: number
        created_at:
          type: string
      example:
        amount: 1.4658129805029452
        user_id: 6
        name: name
        created_at: created_at
        id: 0
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        envelope_id:
          type: integer
          format: int64
        description:
          type: string
        amount:
          type: number
        created_at:
          type: string
      example:
        amount: 1.4658129805029452
        envelope_id: 6
        description: description
        created_at: created_at
        id: 0
    user_body:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        gender:
          type: string
    envelope_body:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        amount:
          type: number
    transaction_body:
      type: object
      properties:
        envelope_id:
          type: integer
        amount:
          type: number
        description:
          type: string
